name: React CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Docker Username
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "Error: DOCKER_USERNAME is not set in secrets!"
            exit 1
          else
            echo "DOCKER_USERNAME is set to: ${{ secrets.DOCKER_USERNAME }}"
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME="wiramin/dmsfe"
          TAGGED_IMAGE="$IMAGE_NAME:${{ github.run_number }}"
          LATEST_IMAGE="$IMAGE_NAME:latest"

          echo "Building image: $TAGGED_IMAGE"
          docker build -t "$TAGGED_IMAGE" .
          docker tag "$TAGGED_IMAGE" "$LATEST_IMAGE"
          docker push "$TAGGED_IMAGE"
          docker push "$LATEST_IMAGE"

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check SSH Secrets
        run: |
          if [ -z "${{ secrets.SSH_PASSWORD }}" ]; then echo "Error: SSH_PASSWORD is not set!"; exit 1; fi
          if [ -z "${{ secrets.SERVER_USERNAME }}" ]; then echo "Error: SERVER_USERNAME is not set!"; exit 1; fi
          if [ -z "${{ secrets.SERVER_HOST }}" ]; then echo "Error: SERVER_HOST is not set!"; exit 1; fi
          if [ -z "${{ secrets.SERVER_PORT }}" ]; then echo "Error: SERVER_PORT is not set!"; exit 1; fi
          echo "SSH secrets are set correctly."

      - name: Deploy to Server, Setup SSL, and Cleanup Old Images
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          SSH_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SSH_HOST: ${{ secrets.SERVER_HOST }}
          SSH_PORT: ${{ secrets.SERVER_PORT }}
          DOMAIN: signdoc-core.io.vn  # Thay bằng tên miền của bạn
        run: |
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=no -p "$SSH_PORT" "$SSH_USERNAME@$SSH_HOST" << 'EOF'
            # Tạo thư mục cần thiết
            mkdir -p /home/$SSH_USERNAME/myapp/certs /home/$SSH_USERNAME/myapp/certbot/www

            # Tạo mạng Docker nếu chưa có
            docker network create app-network || true

            # Lấy chứng chỉ SSL nếu chưa có
            if [ ! -d "/home/$SSH_USERNAME/myapp/certs/live/$DOMAIN" ]; then
              docker run --rm \
                -v /home/$SSH_USERNAME/myapp/certs:/etc/letsencrypt \
                -v /home/$SSH_USERNAME/myapp/certbot/www:/var/www/certbot \
                certbot/certbot certonly \
                --webroot --webroot-path=/var/www/certbot \
                -d $DOMAIN -d www.$DOMAIN \
                --non-interactive --agree-tos --email tgnhatminh@gmail.com
            fi

            # Kéo image mới nhất
            docker pull wiramin/dmsfe:latest
            
            # Lấy ID của image mới để tránh xóa nó
            NEW_IMAGE_ID=$(docker images -q wiramin/dmsfe:latest | head -n 1)
            
            # Dừng và xóa container cũ
            docker stop dmsfe || true
            docker rm dmsfe || true
            
            # Chạy container Nginx mới
            docker run -d \
              --name dmsfe \
              -p 80:80 \
              -p 443:443 \
              --network app-network \
              -v /home/$SSH_USERNAME/myapp/nginx.conf:/etc/nginx/nginx.conf \
              -v /home/$SSH_USERNAME/myapp/certs:/etc/nginx/certs \
              -v /home/$SSH_USERNAME/myapp/certbot/www:/var/www/certbot \
              wiramin/dmsfe:latest
            
            # Chạy container Certbot để gia hạn chứng chỉ
            docker stop certbot || true
            docker rm certbot || true
            docker run -d \
              --name certbot \
              --network app-network \
              -v /home/$SSH_USERNAME/myapp/certs:/etc/letsencrypt \
              -v /home/$SSH_USERNAME/myapp/certbot/www:/var/www/certbot \
              certbot/certbot \
              /bin/sh -c "trap exit TERM; while :; do certbot renew; sleep 12h & wait \${!}; done;"
            
            # Xóa các image cũ của wiramin/dmsfe, trừ image đang dùng
            docker images wiramin/dmsfe --format '{{.ID}}' | grep -v "$NEW_IMAGE_ID" | sort -u | xargs -r docker rmi -f
          EOF

